// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/minio-client.proto

package minio_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MinIOClientClient is the client API for MinIOClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MinIOClientClient interface {
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileReply, error)
}

type minIOClientClient struct {
	cc grpc.ClientConnInterface
}

func NewMinIOClientClient(cc grpc.ClientConnInterface) MinIOClientClient {
	return &minIOClientClient{cc}
}

func (c *minIOClientClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileReply, error) {
	out := new(UploadFileReply)
	err := c.cc.Invoke(ctx, "/minio_client.MinIOClient/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MinIOClientServer is the server API for MinIOClient service.
// All implementations must embed UnimplementedMinIOClientServer
// for forward compatibility
type MinIOClientServer interface {
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileReply, error)
	mustEmbedUnimplementedMinIOClientServer()
}

// UnimplementedMinIOClientServer must be embedded to have forward compatible implementations.
type UnimplementedMinIOClientServer struct {
}

func (UnimplementedMinIOClientServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedMinIOClientServer) mustEmbedUnimplementedMinIOClientServer() {}

// UnsafeMinIOClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MinIOClientServer will
// result in compilation errors.
type UnsafeMinIOClientServer interface {
	mustEmbedUnimplementedMinIOClientServer()
}

func RegisterMinIOClientServer(s grpc.ServiceRegistrar, srv MinIOClientServer) {
	s.RegisterService(&MinIOClient_ServiceDesc, srv)
}

func _MinIOClient_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MinIOClientServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/minio_client.MinIOClient/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MinIOClientServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MinIOClient_ServiceDesc is the grpc.ServiceDesc for MinIOClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MinIOClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "minio_client.MinIOClient",
	HandlerType: (*MinIOClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _MinIOClient_UploadFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/minio-client.proto",
}
