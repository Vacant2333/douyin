// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: UserComment.proto

package userCommentPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserCommentClient is the client API for UserComment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserCommentClient interface {
	//-----------------------userCommentStatus-----------------------
	UpdateCommentStatus(ctx context.Context, in *UpdateCommentStatusReq, opts ...grpc.CallOption) (*UpdateCommentStatusResp, error)
	//-----------------------userCommentList-----------------------
	GetVideoComment(ctx context.Context, in *GetVideoCommentReq, opts ...grpc.CallOption) (*GetVideoCommentReqResp, error)
}

type userCommentClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCommentClient(cc grpc.ClientConnInterface) UserCommentClient {
	return &userCommentClient{cc}
}

func (c *userCommentClient) UpdateCommentStatus(ctx context.Context, in *UpdateCommentStatusReq, opts ...grpc.CallOption) (*UpdateCommentStatusResp, error) {
	out := new(UpdateCommentStatusResp)
	err := c.cc.Invoke(ctx, "/pb.UserComment/UpdateCommentStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userCommentClient) GetVideoComment(ctx context.Context, in *GetVideoCommentReq, opts ...grpc.CallOption) (*GetVideoCommentReqResp, error) {
	out := new(GetVideoCommentReqResp)
	err := c.cc.Invoke(ctx, "/pb.UserComment/GetVideoComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserCommentServer is the server API for UserComment service.
// All implementations must embed UnimplementedUserCommentServer
// for forward compatibility
type UserCommentServer interface {
	//-----------------------userCommentStatus-----------------------
	UpdateCommentStatus(context.Context, *UpdateCommentStatusReq) (*UpdateCommentStatusResp, error)
	//-----------------------userCommentList-----------------------
	GetVideoComment(context.Context, *GetVideoCommentReq) (*GetVideoCommentReqResp, error)
	mustEmbedUnimplementedUserCommentServer()
}

// UnimplementedUserCommentServer must be embedded to have forward compatible implementations.
type UnimplementedUserCommentServer struct {
}

func (UnimplementedUserCommentServer) UpdateCommentStatus(context.Context, *UpdateCommentStatusReq) (*UpdateCommentStatusResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommentStatus not implemented")
}
func (UnimplementedUserCommentServer) GetVideoComment(context.Context, *GetVideoCommentReq) (*GetVideoCommentReqResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoComment not implemented")
}
func (UnimplementedUserCommentServer) mustEmbedUnimplementedUserCommentServer() {}

// UnsafeUserCommentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserCommentServer will
// result in compilation errors.
type UnsafeUserCommentServer interface {
	mustEmbedUnimplementedUserCommentServer()
}

func RegisterUserCommentServer(s grpc.ServiceRegistrar, srv UserCommentServer) {
	s.RegisterService(&UserComment_ServiceDesc, srv)
}

func _UserComment_UpdateCommentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCommentServer).UpdateCommentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserComment/UpdateCommentStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCommentServer).UpdateCommentStatus(ctx, req.(*UpdateCommentStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserComment_GetVideoComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVideoCommentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserCommentServer).GetVideoComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserComment/GetVideoComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserCommentServer).GetVideoComment(ctx, req.(*GetVideoCommentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// UserComment_ServiceDesc is the grpc.ServiceDesc for UserComment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserComment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserComment",
	HandlerType: (*UserCommentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateCommentStatus",
			Handler:    _UserComment_UpdateCommentStatus_Handler,
		},
		{
			MethodName: "GetVideoComment",
			Handler:    _UserComment_GetVideoComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "UserComment.proto",
}
